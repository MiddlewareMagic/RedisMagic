<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>github.middlewaremagic.redismagic</groupId>
    <artifactId>redis-magic</artifactId>
    <packaging>pom</packaging>
    <modules>
        <module>redis-magic-base</module>
        <module>redis-magic-client</module>
        <module>redis-magic-parent</module>
        <module>redis-magic-server</module>
        <module>redis-magic-test</module>
    </modules>
    <version>${revision}</version>

    <properties>
        <revision>0.0.1</revision>
        <!-- resource.delimiter 标签参考：https://www.jianshu.com/p/4410613bb36f -->
        <resource.delimiter>@</resource.delimiter>

        <java.version>8</java.version>
        <!-- 工程构建过程中读取源码时使用的字符集 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <maven-compiler-plugin.version>3.10.1</maven-compiler-plugin.version>
        <maven-source-plugin.version>3.2.1</maven-source-plugin.version>
        <maven-jar-plugin.version>3.3.0</maven-jar-plugin.version>

        <!-- 工具依赖 -->
        <netty4.version>4.1.66.Final</netty4.version>
        <affinity.version>3.21ea5</affinity.version>

        <junit.version>4.12</junit.version>
        <hutool.version>5.8.15</hutool.version>
        <guava.version>31.1-jre</guava.version>
        <orika.version>1.5.4</orika.version>
        <easyexcel.version>3.1.3</easyexcel.version>
        <jasypt.version>3.0.4</jasypt.version>
        <lombok.version>1.18.26</lombok.version>
        <cglib.version>3.3.0</cglib.version>

        <!--  日志依赖  -->
        <log4j.version>1.2.17</log4j.version>
        <slf4j-api.version>2.0.7</slf4j-api.version>
        <logback.version>1.4.7</logback.version>
    </properties>

    <!-- 使用dependencyManagement标签配置对依赖的管理 -->
    <!-- 被管理的依赖并没有真正被引入到工程 -->
    <dependencyManagement>
        <dependencies>
            <!-- https://mvnrepository.com/artifact/cglib/cglib -->
            <dependency>
                <groupId>cglib</groupId>
                <artifactId>cglib</artifactId>
                <version>${cglib.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>
            <!--bean之间的转换-->
            <dependency>
                <groupId>ma.glasnost.orika</groupId>
                <artifactId>orika-core</artifactId>
                <version>${orika.version}</version>
            </dependency>
            <!--excel工具类-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>easyexcel</artifactId>
                <version>${easyexcel.version}</version>
            </dependency>
            <!--配置文件加解密-->
            <dependency>
                <groupId>com.github.ulisesbocchio</groupId>
                <artifactId>jasypt-spring-boot-starter</artifactId>
                <version>${jasypt.version}</version>
            </dependency>
            <!--hutool工具类-->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>
            <!--谷歌工具类-->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-all</artifactId>
                <version>${netty4.version}</version>
            </dependency>
            <dependency>
                <groupId>net.openhft</groupId>
                <artifactId>affinity</artifactId>
                <version>${affinity.version}</version>
            </dependency>
            <!--  日志相关依赖  -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j-api.version}</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-core</artifactId>
                <version>${logback.version}</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback.version}</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>github.middlewaremagic.redismagic</groupId>
                <artifactId>redis-magic-parent</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>github.middlewaremagic.redismagic</groupId>
                <artifactId>redis-magic-common</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>github.middlewaremagic.redismagic</groupId>
                <artifactId>redis-magic-utils</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>github.middlewaremagic.redismagic</groupId>
                <artifactId>redis-magic-core</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>github.middlewaremagic.redismagic</groupId>
                <artifactId>redis-magic-cache</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>github.middlewaremagic.redismagic</groupId>
                <artifactId>redis-magic-network-client</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>github.middlewaremagic.redismagic</groupId>
                <artifactId>redis-magic-network-server</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>github.middlewaremagic.redismagic</groupId>
                <artifactId>redis-magic-resp-client</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>github.middlewaremagic.redismagic</groupId>
                <artifactId>redis-magic-resp-server</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>github.middlewaremagic.redismagic</groupId>
                <artifactId>redis-magic-server-main</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>github.middlewaremagic.redismagic</groupId>
                <artifactId>redis-magic-client-main</artifactId>
                <version>${revision}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- build 标签：用来配置对构建过程的定制 -->
    <build>
        <finalName>${project.artifactId}</finalName>
        <pluginManagement>
            <!-- plugins 标签：定制化构建过程中所使用到的插件 -->
            <plugins>
                <!--maven-compiler-plugin插件可以指定项目源码的jdk版本，编译后的jdk版本，以及编码。-->
                <!-- 参考: https://blog.csdn.net/liupeifeng3514/article/details/80236077 -->
                <plugin>
                    <!-- 插件的坐标。此处引用的 maven-compiler-plugin 插件不是第三方的，是一个 Maven 自带的插件。 -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <!-- configuration 标签：配置 maven-compiler-plugin 插件 -->
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <testSource>${java.version}</testSource>
                        <testTarget>${java.version}</testTarget>
                    </configuration>
                </plugin>
                <!--maven-source-plugin 这个插件专门负责将项目源文件打成包的-->
                <!--参考: https://blog.csdn.net/liaowenxiong/article/details/124879376 -->
                <!--提供项目自动将源码打包并发布的功能, maven会自动将source install到repository -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven-source-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <!-- 执行生命周期阶段 verify 时会调用该插件的目标 jar-no-fork，该目标会将 jar 文件安装到本地的 Maven 仓库中。 -->
                            <phase>verify</phase>
                            <goals>
                                <!--在生命周期后执行绑定的source插件的goals -->
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven-jar-plugin.version}</version>
                    <configuration>
                        <archive>
                            <!-- 生成的jar中，包含pom.xml和pom.properties这两个文件 -->
                            <addMavenDescriptor>true</addMavenDescriptor>
                            <!-- 生成MANIFEST.MF的设置 -->
                            <manifest>
                                <!--这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库
                                下面可能会有多个包，并且只有一个是正确的，其余的可能是带时间戳的，
                                此时会在classpath下面把那个带时间戳的给添加上去，
                                然后我们 在依赖打包的时候，打的是正确的，所以两头会对不上，报错。 -->
                                <useUniqueVersions>false</useUniqueVersions>
                                <!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 -->
                                <addClasspath>true</addClasspath>
                                <!-- 这个jar所依赖的jar包添加classPath的时候的前缀，如果这个jar本身
                                和依赖包在同一级目录，则不需要添加 -->
                                <classpathPrefix>lib/</classpathPrefix>
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>